import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -noinstantiate -nonrelocatable org.nemomobile.calendar 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "CalendarAgendaModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.calendar/AgendaModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AgendaRoles"
            values: {
                "EventObjectRole": 256,
                "OccurrenceObjectRole": 257,
                "SectionBucketRole": 258
            }
        }
        Enum {
            name: "FilterMode"
            values: {
                "FilterNone": 0,
                "FilterNonAllDay": 1,
                "FilterMultipleEventsPerNotebook": 2,
                "FilterAllDay": 4
            }
        }
        Enum {
            name: "FilterModes"
            values: {
                "FilterNone": 0,
                "FilterNonAllDay": 1,
                "FilterMultipleEventsPerNotebook": 2,
                "FilterAllDay": 4
            }
        }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "startDate"; type: "QDate" }
        Property { name: "endDate"; type: "QDate" }
        Property { name: "filterMode"; type: "FilterModes" }
        Signal { name: "updated" }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "role"; type: "int" }
        }
    }
    Component {
        name: "CalendarApi"
        prototype: "QObject"
        exports: ["org.nemomobile.calendar/Calendar 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "excludedNotebooks"; type: "QStringList" }
        Property { name: "defaultNotebook"; type: "string" }
        Method { name: "createNewEvent"; type: "CalendarEventModification*" }
        Method {
            name: "createModification"
            type: "CalendarEventModification*"
            Parameter { name: "sourceEvent"; type: "CalendarStoredEvent"; isPointer: true }
            Parameter { name: "occurrence"; type: "CalendarEventOccurrence"; isPointer: true }
        }
        Method {
            name: "createModification"
            type: "CalendarEventModification*"
            Parameter { name: "sourceEvent"; type: "CalendarStoredEvent"; isPointer: true }
        }
        Method {
            name: "remove"
            Parameter { name: "instanceId"; type: "string" }
            Parameter { name: "time"; type: "QDateTime" }
        }
        Method {
            name: "remove"
            Parameter { name: "instanceId"; type: "string" }
        }
        Method {
            name: "removeAll"
            Parameter { name: "instanceId"; type: "string" }
        }
    }
    Component {
        name: "CalendarAttendeeModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.calendar/AttendeeModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SectionRoles"
            values: {
                "RequiredSection": 0,
                "OptionalSection": 1,
                "NonSection": 2,
                "ChairSection": 3,
                "OrganizerSection": 4
            }
        }
        Property { name: "count"; type: "int"; isReadonly: true }
        Method {
            name: "doFill"
            Parameter { name: "people"; type: "QList<QObject*>" }
        }
    }
    Component {
        name: "CalendarContactModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.calendar/ContactModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Method {
            name: "append"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "email"; type: "string" }
        }
        Method {
            name: "prepend"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "email"; type: "string" }
        }
        Method {
            name: "remove"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "hasEmail"
            type: "bool"
            Parameter { name: "email"; type: "string" }
        }
        Method {
            name: "name"
            type: "string"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "email"
            type: "string"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "CalendarEvent"
        prototype: "QObject"
        exports: ["org.nemomobile.calendar/CalendarEvent 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Recur"
            values: {
                "RecurOnce": 0,
                "RecurDaily": 1,
                "RecurWeekly": 2,
                "RecurBiweekly": 3,
                "RecurWeeklyByDays": 4,
                "RecurMonthly": 5,
                "RecurMonthlyByDayOfWeek": 6,
                "RecurMonthlyByLastDayOfWeek": 7,
                "RecurYearly": 8,
                "RecurCustom": 9
            }
        }
        Enum {
            name: "Days"
            values: {
                "NoDays": 0,
                "Monday": 1,
                "Tuesday": 2,
                "Wednesday": 4,
                "Thursday": 8,
                "Friday": 16,
                "Saturday": 32,
                "Sunday": 64
            }
        }
        Enum {
            name: "Secrecy"
            values: {
                "SecrecyPublic": 0,
                "SecrecyPrivate": 1,
                "SecrecyConfidential": 2
            }
        }
        Enum {
            name: "Response"
            values: {
                "ResponseUnspecified": 0,
                "ResponseAccept": 1,
                "ResponseTentative": 2,
                "ResponseDecline": 3
            }
        }
        Enum {
            name: "SyncFailure"
            values: {
                "NoSyncFailure": 0,
                "CreationFailure": 1,
                "UploadFailure": 2,
                "UpdateFailure": 3,
                "DeleteFailure": 4
            }
        }
        Enum {
            name: "SyncFailureResolution"
            values: {
                "RetrySync": 0,
                "KeepOutOfSync": 1,
                "PushDeviceData": 2,
                "PullServerData": 3
            }
        }
        Enum {
            name: "Status"
            values: {
                "StatusNone": 0,
                "StatusTentative": 1,
                "StatusConfirmed": 2,
                "StatusCancelled": 3
            }
        }
        Property { name: "displayLabel"; type: "string"; isReadonly: true }
        Property { name: "description"; type: "string"; isReadonly: true }
        Property { name: "startTime"; type: "QDateTime"; isReadonly: true }
        Property { name: "endTime"; type: "QDateTime"; isReadonly: true }
        Property { name: "startTimeSpec"; type: "Qt::TimeSpec"; isReadonly: true }
        Property { name: "endTimeSpec"; type: "Qt::TimeSpec"; isReadonly: true }
        Property { name: "startTimeZone"; type: "string"; isReadonly: true }
        Property { name: "endTimeZone"; type: "string"; isReadonly: true }
        Property { name: "allDay"; type: "bool"; isReadonly: true }
        Property { name: "recur"; type: "CalendarEvent::Recur"; isReadonly: true }
        Property { name: "recurEndDate"; type: "QDateTime"; isReadonly: true }
        Property { name: "hasRecurEndDate"; type: "bool"; isReadonly: true }
        Property { name: "recurWeeklyDays"; type: "CalendarEvent::Days"; isReadonly: true }
        Property { name: "reminder"; type: "int"; isReadonly: true }
        Property { name: "reminderDateTime"; type: "QDateTime"; isReadonly: true }
        Property { name: "instanceId"; type: "string"; isReadonly: true }
        Property { name: "isException"; type: "bool"; isReadonly: true }
        Property { name: "readOnly"; type: "bool"; isReadonly: true }
        Property { name: "calendarUid"; type: "string"; isReadonly: true }
        Property { name: "location"; type: "string"; isReadonly: true }
        Property { name: "secrecy"; type: "CalendarEvent::Secrecy"; isReadonly: true }
        Property { name: "status"; type: "CalendarEvent::Status"; isReadonly: true }
        Property { name: "syncFailure"; type: "CalendarEvent::SyncFailure"; isReadonly: true }
        Property {
            name: "syncFailureResolution"
            type: "CalendarEvent::SyncFailureResolution"
            isReadonly: true
        }
        Property { name: "ownerStatus"; type: "CalendarEvent::Response"; isReadonly: true }
        Property { name: "rsvp"; type: "bool"; isReadonly: true }
        Property { name: "externalInvitation"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "CalendarEventListModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.calendar/EventListModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "EventListRoles"
            values: {
                "EventObjectRole": 256,
                "OccurrenceObjectRole": 257,
                "IdentifierRole": 258,
                "LastRole": 259
            }
        }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "identifiers"; type: "QStringList" }
        Property { name: "startTime"; type: "QDateTime" }
        Property { name: "missingItems"; type: "QStringList"; isReadonly: true }
        Property { name: "loading"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "CalendarEventModification"
        prototype: "CalendarEvent"
        exports: ["org.nemomobile.calendar/CalendarEventModification 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "displayLabel"; type: "string" }
        Property { name: "description"; type: "string" }
        Property { name: "allDay"; type: "bool" }
        Property { name: "recur"; type: "CalendarEvent::Recur" }
        Property { name: "recurWeeklyDays"; type: "CalendarEvent::Days" }
        Property { name: "reminder"; type: "int" }
        Property { name: "reminderDateTime"; type: "QDateTime" }
        Property { name: "location"; type: "string" }
        Property { name: "calendarUid"; type: "string" }
        Property { name: "syncFailureResolution"; type: "CalendarEvent::SyncFailureResolution" }
        Signal { name: "startTimeChanged" }
        Signal { name: "endTimeChanged" }
        Signal { name: "recurEndDateChanged" }
        Signal { name: "hasRecurEndDateChanged" }
        Method {
            name: "setStartTime"
            Parameter { name: "startTime"; type: "QDateTime" }
            Parameter { name: "spec"; type: "Qt::TimeSpec" }
            Parameter { name: "timezone"; type: "string" }
        }
        Method {
            name: "setStartTime"
            Parameter { name: "startTime"; type: "QDateTime" }
            Parameter { name: "spec"; type: "Qt::TimeSpec" }
        }
        Method {
            name: "setEndTime"
            Parameter { name: "endTime"; type: "QDateTime" }
            Parameter { name: "spec"; type: "Qt::TimeSpec" }
            Parameter { name: "timezone"; type: "string" }
        }
        Method {
            name: "setEndTime"
            Parameter { name: "endTime"; type: "QDateTime" }
            Parameter { name: "spec"; type: "Qt::TimeSpec" }
        }
        Method {
            name: "setRecurEndDate"
            Parameter { name: "dateTime"; type: "QDateTime" }
        }
        Method { name: "unsetRecurEndDate" }
        Method {
            name: "setAttendees"
            Parameter { name: "required"; type: "CalendarContactModel"; isPointer: true }
            Parameter { name: "optional"; type: "CalendarContactModel"; isPointer: true }
        }
        Method { name: "save" }
    }
    Component {
        name: "CalendarEventOccurrence"
        prototype: "QObject"
        exports: ["org.nemomobile.calendar/CalendarEventOccurrence 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "startTime"; type: "QDateTime"; isReadonly: true }
        Property { name: "endTime"; type: "QDateTime"; isReadonly: true }
        Property { name: "startTimeInTz"; type: "QDateTime"; isReadonly: true }
        Property { name: "endTimeInTz"; type: "QDateTime"; isReadonly: true }
        Property { name: "event"; type: "CalendarStoredEvent"; isReadonly: true; isPointer: true }
    }
    Component {
        name: "CalendarEventQuery"
        prototype: "QObject"
        exports: ["org.nemomobile.calendar/EventQuery 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "instanceId"; type: "string" }
        Property { name: "startTime"; type: "QDateTime" }
        Property { name: "event"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "occurrence"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "attendees"; type: "QList<QObject*>"; isReadonly: true }
        Property { name: "eventError"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "CalendarImportModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.calendar/ImportModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "fileName"; type: "string" }
        Property { name: "icsString"; type: "string" }
        Property { name: "targetNotebook"; type: "string" }
        Property { name: "hasDuplicates"; type: "bool"; isReadonly: true }
        Property { name: "hasInvitations"; type: "bool"; isReadonly: true }
        Property { name: "error"; type: "bool"; isReadonly: true }
        Signal { name: "notebookUidChanged" }
        Signal { name: "errorChanged"; type: "bool" }
        Method {
            name: "getEvent"
            type: "QObject*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "save"
            type: "bool"
            Parameter { name: "discardInvitation"; type: "bool" }
        }
        Method { name: "save"; type: "bool" }
    }
    Component {
        name: "CalendarInvitationQuery"
        prototype: "QObject"
        exports: ["org.nemomobile.calendar/InvitationQuery 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "invitationFile"; type: "string" }
        Property { name: "notebookUid"; type: "string"; isReadonly: true }
        Property { name: "instanceId"; type: "string"; isReadonly: true }
        Property { name: "startTime"; type: "string"; isReadonly: true }
        Property { name: "busy"; type: "bool"; isReadonly: true }
        Signal { name: "queryFinished" }
        Method { name: "query" }
    }
    Component {
        name: "CalendarNotebookModel"
        prototype: "QAbstractListModel"
        exports: ["org.nemomobile.calendar/NotebookModel 1.0"]
        exportMetaObjectRevisions: [0]
        Method { name: "notebooksAboutToChange" }
        Method { name: "notebooksChanged" }
    }
    Component {
        name: "CalendarNotebookQuery"
        prototype: "QObject"
        exports: ["org.nemomobile.calendar/NotebookQuery 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "targetUid"; type: "string" }
        Property { name: "isValid"; type: "bool"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "description"; type: "string"; isReadonly: true }
        Property { name: "color"; type: "string"; isReadonly: true }
        Property { name: "accountId"; type: "int"; isReadonly: true }
        Property { name: "accountIcon"; type: "QUrl"; isReadonly: true }
        Property { name: "isDefault"; type: "bool"; isReadonly: true }
        Property { name: "localCalendar"; type: "bool"; isReadonly: true }
        Property { name: "isReadOnly"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "CalendarSearchModel"
        prototype: "CalendarEventListModel"
        exports: ["org.nemomobile.calendar/EventSearchModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SearchRoles"
            values: {
                "YearRole": 259
            }
        }
        Property { name: "searchString"; type: "string" }
        Property { name: "limit"; type: "int" }
        Property { name: "loading"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "CalendarStoredEvent"
        prototype: "CalendarEvent"
        exports: ["org.nemomobile.calendar/CalendarStoredEvent 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "color"; type: "string"; isReadonly: true }
        Property {
            name: "recurringParent"
            type: "CalendarStoredEvent"
            isReadonly: true
            isPointer: true
        }
        Method {
            name: "sendResponse"
            type: "bool"
            Parameter { name: "response"; type: "int" }
        }
        Method {
            name: "iCalendar"
            type: "string"
            Parameter { name: "prodId"; type: "string" }
        }
        Method { name: "iCalendar"; type: "string" }
        Method { name: "deleteEvent" }
    }
    Component {
        name: "Person"
        prototype: "QObject"
        exports: ["org.nemomobile.calendar/Person 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "AttendeeRole"
            values: {
                "RequiredParticipant": 0,
                "OptionalParticipant": 1,
                "NonParticipant": 2,
                "ChairParticipant": 3
            }
        }
        Enum {
            name: "ParticipationStatus"
            values: {
                "UnknownParticipation": 0,
                "AcceptedParticipation": 1,
                "DeclinedParticipation": 2,
                "TentativeParticipation": 3
            }
        }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "email"; type: "string"; isReadonly: true }
        Property { name: "isOrganizer"; type: "bool"; isReadonly: true }
        Property { name: "participationRole"; type: "int"; isReadonly: true }
        Property { name: "participationStatus"; type: "int"; isReadonly: true }
    }
    Component {
        name: "QtDate"
        prototype: "QObject"
        exports: ["org.nemomobile.calendar/QtDate 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "daysTo"
            type: "int"
            Parameter { type: "QDate" }
            Parameter { type: "QDate" }
        }
        Method {
            name: "addDays"
            type: "QDate"
            Parameter { type: "QDate" }
            Parameter { type: "int" }
        }
        Method {
            name: "New"
            type: "QObject*"
            Parameter { name: "e"; type: "QQmlEngine"; isPointer: true }
            Parameter { type: "QJSEngine"; isPointer: true }
        }
    }
}
